typedef enum {
	TONEAREST, UPWARD, DOWNWARD, TOWARDZERO
} rounding_mode_t;

typedef union {
	real	num;
	void	nan;
	void	inf;
} value_t;

typedef struct {
	bool	sign;
	value_t	u;
} float_t;

int
min_exp(int exp_bits)
{
	return -(2**(exp_bits-1) - 3);
}

int
max_exp(int exp_bits)
{
	return (2**(exp_bits-1));
}

float_t
make_float(real num)
{
	return (float_t) {
		.sign = num < 0,
		.u = { .num = num },
	};
}

float_t
make_inf(bool sign)
{
	return (float_t) {
		.sign = sign,
		.u = { .inf = <> },
	};
}

float_t
round(float_t f, int bits, int exp_bits, rounding_mode_t rm)
{
	union switch(f.u) {
	case num x:
		if (f.sign)
			x = -x;
		int exp;
		if (x == 0)
			exp = 0;
		else
			exp = ceil(log2(x));
		int denorm = min_exp(exp_bits) - exp;
		if (denorm > 0) {
#			printf("denorm %d\n", denorm);
			bits -= denorm;
		}
		real mant = abs(x / (2**(exp-bits)));;

		int ipart = floor(mant);
		real fpart = mant - ipart;

#		printf("%a: mant %f ipart %d fpart %f\n", x, mant, ipart, fpart);

		union switch(rm) {
		case TONEAREST:
			if (fpart == 0.5) {
				/* round even when the fraction is exactly 1/2 */
				if ((ipart & 1) != 0)
					ipart = ipart + 1;
			} else if (fpart > 0.5) {
				ipart = ipart + 1;
			}
			break;
		case UPWARD:
			if (!f.sign) {
				if (fpart > 0)
					ipart = ipart + 1;
			} else {
				if (exp > max_exp(exp_bits)) {
					exp = max_exp(exp_bits);
					ipart = (2**bits) - 1;
				}
			}
			break;
		case DOWNWARD:
			if (f.sign) {
				if (fpart > 0)
					ipart = ipart + 1;
			} else {
				if (exp > max_exp(exp_bits)) {
					exp = max_exp(exp_bits);
					ipart = (2**bits) - 1;
				}
			}
			break;
		case TOWARDZERO:
			if (exp > max_exp(exp_bits)) {
				exp = max_exp(exp_bits);
				ipart = (2**bits) - 1;
			}
			break;
		}
		if (bits < 0) {
			exp -= bits;
			bits = 0;
		}
		mant = ipart / (2 ** bits);
		if (mant >= 1) {
			exp++;
			mant /= 2;
		}
		if (exp > max_exp(exp_bits)) {
			f.u.inf = <>;
		} else {
			f.u.num = mant * 2 ** exp;
			if (f.sign)
				f.u.num = -f.u.num;
		}
		break;
	case nan:
	case inf:
		break;
	}
	return f;
}

string
strfromfloat(float_t f, string suffix)
{
	union switch (f.u) {
	case num x:
		if (x == 0)
			return sprintf("%.1f%s", x, suffix);
		else
			return sprintf("%.6a%s", x, suffix);
	case nan:
		return sprintf("%s%s", f.sign ? "          -nan" : "           nan", suffix);
	case inf:
		return sprintf("%s%s", f.sign ? "          -inf" : "           inf", suffix);
	}
}

bool
isfinite(float_t f)
{
	union switch (f.u) {
	case num:
		return true;
	default:
		return false;
	}
}

bool
isnan(float_t f)
{
	union switch (f.u) {
	case nan:
		return true;
	default:
		return false;
	}
}

bool
isinf(float_t f)
{
	union switch (f.u) {
	case inf:
		return true;
	default:
		return false;
	}
}

float_t
times(float_t a, float_t b)
{
	if (isnan(a))
		return a;
	if (isnan(b))
		return b;

	bool sign = !(a.sign == b.sign);

	if (isinf(a)) {
		if (b.u == (value_t.num) 0)
			return (float_t) { .sign = sign, .u = { .nan = <> } };
		return (float_t) { .sign = sign, .u = a.u };
	}
	if (isinf(b)) {
		if (a.u == (value_t.num) 0)
			return (float_t) { .sign = sign, .u = { .nan = <> } };
		return (float_t) { .sign = sign, .u = b.u };
	}
	return (float_t) { .sign = sign, .u = { .num = a.u.num * b.u.num } };
}

float_t
plus(float_t a, float_t b)
{
	if (isnan(a))
		return a;
	if (isnan(b))
		return b;

	if (isinf(a)) {
		if (isinf(b) && a.sign != b.sign)
			return (float_t) { .sign = true, .u = { .nan = <> } };
		return a;
	}
	if (isinf(b)) {
		return b;
	}
	real v = a.u.num + b.u.num;
	bool sign = v < 0;
	if (v == 0)
		sign = a.sign;
	return (float_t) { .sign = sign, .u = { .num = v } };
}

float_t
fma(float_t x, float_t y, float_t z)
{
	if (!isfinite(z) && isfinite(x) && isfinite(y))
		return z;
	return plus(times(x, y), z);
}

int MIN_EXP;
int MAX_EXP;
int MANT_DIG;
int FIRST_EXP;
int LAST_EXP;

int next_exp(int e)
{
	switch (e) {
	case FIRST_EXP + 1:
		return MIN_EXP - 2;
	case MIN_EXP:
		return -1;
	case 1:
		return LAST_EXP - 2;
	default:
		return e + 1;
	}
}

void generate(string suf, int bits, int exp_bits)
{
	MIN_EXP = -(2**(exp_bits-1) -3);
	MAX_EXP = 2**(exp_bits-1);
	MANT_DIG = bits;
	FIRST_EXP = (MIN_EXP - MANT_DIG - 2);
	LAST_EXP = (MAX_EXP);

	real val = 1 + 2**-(bits-1);

	for (int zs = -1; zs <= 1; zs += 2) {
		for (int ze = FIRST_EXP; ze <= LAST_EXP; ze = next_exp(ze)) {
			float_t z = round(make_float(zs * val * (2 ** ze)), bits, exp_bits, rounding_mode_t.TONEAREST);
			for (int ye = FIRST_EXP; ye <= LAST_EXP; ye = next_exp(ye)) {
				float_t y = round(make_float(val * (2 ** ye)), bits, exp_bits, rounding_mode_t.TONEAREST);
				for (int xs = -1; xs <= 1; xs += 2) {
					for (int xe = FIRST_EXP; xe <= LAST_EXP; xe = next_exp(xe)) {
						float_t x = round(make_float(xs * val * (2 ** xe)), bits, exp_bits, rounding_mode_t.TONEAREST);
						printf("    { %-17s, %-17s, %-17s, {", strfromfloat(x, suf), strfromfloat(y, suf), strfromfloat(z, suf));
						File::flush(stdout);
						float_t r = plus(times(x, y), z);
						printf(" %s,", strfromfloat(round(r, bits, exp_bits, rounding_mode_t.TONEAREST), suf));
						printf(" %s,", strfromfloat(round(r, bits, exp_bits, rounding_mode_t.UPWARD), suf));
						printf(" %s,", strfromfloat(round(r, bits, exp_bits, rounding_mode_t.DOWNWARD), suf));
						printf(" %s" , strfromfloat(round(r, bits, exp_bits, rounding_mode_t.TOWARDZERO), suf));
						printf(" } },\n");
						File::flush(stdout);
					}
				}
			}
		}
	}
}

void main()
{
	printf("static const struct fmaf_vec fmaf_vec[] = {\n");
	generate("f", 24, 8);
	printf("};\n");
	printf("static const struct fma_vec fma_vec[] = {\n");
	generate("", 53, 11);
	printf("};\n");
	printf("#if LDBL_MANT_DIG == 64\n");
	printf("static const struct fmal_vec fmal_vec[] = {\n");
	generate("l", 64, 15);
	printf("};\n");
	printf("#endif\n");
	printf("#if LDBL_MANT_DIG == 113\n");
	printf("static const struct fmal_vec fmal_vec[] = {\n");
	generate("l", 113, 15);
	printf("};\n");
	printf("#endif\n");
}

real xf = 0x0.000000000000001p-16385;
real yf = 0x0.000000000000001p-16385;
real zf = -0x0.000000000000001p-16385;

float_t x = make_float(xf);
float_t y = make_float(yf);
float_t z = make_float(zf);

float_t r = plus(times(x, y), z);

int bits = 64;
int exp_bits = 15;
string suf = "l";

printf("%a\n", r.u.num);
printf(" %s\n", strfromfloat(round(r, bits, exp_bits, rounding_mode_t.TONEAREST), suf));
printf(" %s\n", strfromfloat(round(r, bits, exp_bits, rounding_mode_t.UPWARD), suf));
printf(" %s\n", strfromfloat(round(r, bits, exp_bits, rounding_mode_t.DOWNWARD), suf));
printf(" %s\n" , strfromfloat(round(r, bits, exp_bits, rounding_mode_t.TOWARDZERO), suf));

#main();
